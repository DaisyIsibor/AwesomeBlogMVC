<!-- homepage.handlebars -->

{{#each posts}}
    <div class="post" id="post-{{id}}">
        <!-- Make the post title a link to the post details page -->
        <h2>
            <a href="/post/{{id}}/comments">{{title}}</a> - 
            <span class="post-info">{{user.username}} | {{formatDate createdAt}}</span>
        </h2>
        <p>{{content}}</p>

        <!-- Like/Unlike Button -->
        <button class="like-post-btn {{#if userLiked}}liked{{/if}}" data-post-id="{{id}}">
            <img src="./images/heart.svg" class="like-icon" alt="like icon">
            <span class="like-count" id="like-count-{{id}}">{{likeCount}}</span>
        </button>


        <!-- Comment Link -->
        <a href="/post/{{id}}/comments" class="comment-link">
            <img src="./images/comment.svg" class="comment-icon" alt="comment logo">
        </a>
    </div>
{{/each}}

<script>
document.addEventListener('DOMContentLoaded', function() {
    function scrollToNewPost() {
        var urlParams = new URLSearchParams(window.location.search);
        var postId = urlParams.get('postId');
        if (postId) {
            var postElement = document.getElementById('post-' + postId);
            if (postElement) {
                postElement.scrollIntoView({ behavior: 'smooth' });
            }
        }
    }

    function updateLikeCount(postId) {
        fetch('/like/count/' + postId)
            .then(function(response) {
                return response.json();
            })
            .then(function(data) {
                document.getElementById('like-count-' + postId).innerText = data.likeCount;
            })
            .catch(function(error) {
                console.error('Error fetching like count:', error);
            });
    }

    function handleLikeUnlike(event) {
        var button = event.target.closest('.like-post-btn');
        if (!button) return; // Ensure the click event is on a button

        var postId = button.getAttribute('data-post-id');
        var isLikeAction = !button.classList.contains('liked'); // Toggle based on current state
        var url = '/like/' + postId;
        var method = isLikeAction ? 'POST' : 'DELETE';

        fetch(url, { method: method })
            .then(function(response) {
                if (!response.ok) {
                    return response.text().then(function(text) {
                        throw new Error(text || 'Failed to process your request.');
                    });
                }

                // Toggle button class based on response
                if (isLikeAction) {
                    button.classList.add('liked');
                } else {
                    button.classList.remove('liked');
                }

                // Update like count
                updateLikeCount(postId);
            })
            .catch(function(error) {
                console.error('Error handling like/unlike:', error);
                alert(error.message || 'An error occurred while processing your request.');
            });
    }

    // Adding event listeners for like/unlike buttons
    document.body.addEventListener('click', function(event) {
        if (event.target.closest('.like-post-btn')) {
            event.stopImmediatePropagation();
            handleLikeUnlike(event);
        }
    });

    // Initial load of like counts
    document.querySelectorAll('.post').forEach(function(post) {
        var postId = post.querySelector('.like-post-btn').getAttribute('data-post-id');
        updateLikeCount(postId);
    });

    // Call the function to scroll to the newly created post
    scrollToNewPost();
});

</script>

